THREE.ToonComposeMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:this.uniforms,vertexShader:this.vertexShader,fragmentShader:this.fragmentShader,blending:THREE.MultiplyBlending,depthTest:!1,depthWrite:!1,transparent:!0})},THREE.ToonComposeMaterial.prototype=Object.assign(Object.create(THREE.ShaderMaterial.prototype),{uniforms:{depthtexture:{type:"t",value:null},normaltexture:{type:"t",value:null},wireAlpha:{value:1},wireColor:{type:"c",value:null}},vertexShader:"varying vec2 vUv;\nvoid main() {\n gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n vUv = uv;\n}",fragmentShader:"\nuniform sampler2D depthtexture;\nuniform sampler2D normaltexture;\nuniform sampler2D hatchtexture;\nuniform vec3 wireColor;\nuniform float wireAlpha;\nuniform vec3 modelColor;\nuniform float modelAlpha;\nuniform bool bottomLayer;\nvarying vec2 vUv;\nfloat planeDistance(const in vec3 positionA, const in vec3 normalA, \n                    const in vec3 positionB, const in vec3 normalB) {\n vec3 positionDelta = positionB-positionA;\n float planeDistanceDelta = max(abs(dot(positionDelta, normalA)),\n   abs(dot(positionDelta, normalB)));\n return planeDistanceDelta;\n}\n\nvoid main() {\n float depthCenter = texture2D(depthtexture, vUv).r;\n float px = 1.0/800.0;\n vec3 leftpos = vec3(vUv.s - px, vUv.t, 1.0 - texture2D(depthtexture, vec2(vUv.s - px, vUv.t)).r);\n vec3 rightpos = vec3(vUv.s + px, vUv.t, 1.0 - texture2D(depthtexture, vec2(vUv.s + px, vUv.t)).r);\n vec3 uppos = vec3(vUv.s, vUv.t - px, 1.0 - texture2D(depthtexture, vec2(vUv.s, vUv.t - px)).r);\n vec3 downpos = vec3(vUv.s, vUv.t + px, 1.0 - texture2D(depthtexture, vec2(vUv.s, vUv.t + px)).r);\n vec3 leftnor = texture2D(normaltexture, vec2(vUv.s - px, vUv.t)).xyz;\n vec3 rightnor = texture2D(normaltexture, vec2(vUv.s + px, vUv.t)).xyz;\n vec3 upnor = texture2D(normaltexture, vec2(vUv.s, vUv.t - px)).xyz;\n vec3 downnor = texture2D(normaltexture, vec2(vUv.s, vUv.t + px)).xyz;\n vec2 planeDist = vec2(\n     planeDistance(leftpos, leftnor, rightpos, rightnor),\n   planeDistance(uppos, upnor, downpos, downnor));\n float planeEdge = 2.5 * length(planeDist);\n planeEdge = 1.0 - 0.5 * smoothstep(0.0, depthCenter, planeEdge);\n float normEdge = max(length(leftnor - rightnor), length(upnor - downnor));\n normEdge = 1.0 - 0.5 * smoothstep(0.0, 0.5, normEdge); \n float edge= planeEdge * normEdge;\n //vec4 hatch = texture2D(hatchtexture, vUv);\n //gl_FragColor = vec4(vec3(hatch * edge), 1.0);\n float val = pow(1.25*(edge-0.05),5.0);\n vec3 normalVal = texture2D(normaltexture, vUv).xyz;\n vec4 fragColor = vec4(vec3(val),1.0-val);\n if(length(normalVal)<=0.001){\n   fragColor = vec4(1.0,1.0,1.0,1.0);\n }else{\n   fragColor = vec4(fragColor.rgb+wireColor.rgb,fragColor.a*wireAlpha);\n }\n gl_FragColor = fragColor;\n}"});
